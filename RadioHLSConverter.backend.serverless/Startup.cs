/*
 * Startup.cs
 * Main startup function.
 * Date : 2021-05-24.
 * By : Jonathan Mass√©
 */


// Includes.
using System;
using System.Collections.Generic;
using System.Globalization;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Localization;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using RadioHLSConverter.backend.serverless.Settings;
using RadioHLSConverter.backend.serverless.Services;
using FFMpegCore;
using Microsoft.AspNetCore.Http;
using Microsoft.OpenApi.Models;


namespace RadioHLSConverter.backend.serverless
{
    /// <summary>
    /// Startup
    /// </summary>
    public class Startup
    {
        // Configuration.
        public static IConfiguration Configuration { get; private set; }
        private static AppSettings AppSettings { get; set; }

        /// <summary>
        /// Constructor.
        /// </summary>
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }


        /// <summary>
        /// ConfigureServices.
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// </summary>
        public void ConfigureServices(IServiceCollection services)
        {
            ////////////////////////////////////////
            /// Add MVC & versioning.
            ////////////////////////////////////////
            services.AddControllers(options =>
                {
                    options.EnableEndpointRouting = false;
                }); // Add Controllers.

            // Configure HSTS
            // https://docs.microsoft.com/en-us/aspnet/core/security/enforcing-ssl?WT.mc_id=DT-MVP-5003978#http-strict-transport-security-protocol-hsts
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
            services.AddHsts(options =>
            {
                options.IncludeSubDomains = true;
                options.MaxAge = TimeSpan.FromDays(365);
            });

            ////////////////////////////////////////
            // Configure strongly typed settings objects
            ////////////////////////////////////////
            var appSettingsSection = Configuration.GetSection("AppSettings");
            services.Configure<AppSettings>(appSettingsSection);

            // Init app settings objects.
            AppSettings = new AppSettings();
            appSettingsSection.Bind(AppSettings);


            ////////////////////////////////////////
            // Add languages.
            ////////////////////////////////////////
            services.AddLocalization(options => options.ResourcesPath = "Resources");
            services.Configure<RequestLocalizationOptions>(options =>
            {
                var supportedCultures = new List<CultureInfo>
                {
                    new CultureInfo("en")
                };

                options.DefaultRequestCulture = new RequestCulture("en");
                options.SupportedCultures = supportedCultures;
                options.SupportedUICultures = supportedCultures;
            });


            ////////////////////////////////////////
            // Configure DI for application services.
            ////////////////////////////////////////
            services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();
            services.AddScoped<IFFMpegConverterService, FFMpegConverterService>();
            services.AddScoped<IHLSRadioConverterService, HLSRadioConverterService>();
            services.AddScoped<IM3U8FileService, M3U8FileService>();

            GlobalFFOptions.Configure(options => options.BinaryFolder = AppDomain.CurrentDomain.BaseDirectory+ "ffmpeg-binaries");
#if DEBUG
            ////////////////////////////////////////
            // Register the Swagger generator, defining one or more Swagger documents. (API docs generator)
            // To test Swagger API go to - http://localhost:56354/swagger/
            ////////////////////////////////////////
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1.0", new OpenApiInfo{ Title = "Core API", Description = "Swagger Core API", Version = "v1.0" });

                // We must fill the textbox with Bearer before the token, like "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJ1c2VyaWQiOiI0OCIsIm5iZiI6MTU3NDk2ODk5MywiZXhwIjoxNTc1MDU1MzkzLCJpYXQiOjE1NzQ5Njg5OTN9.dmuFjfkCg6-XVbtrJT7uiUDJHcT8vqVt5pCgVM7ms2oKMu0R-t9GX0hpi7VAT5RMcnbKI-coMZq3Oe_3HSHV_Q"

                // Locate the XML file being generated by ASP.NET...
                // IMPORTANT : This part is to improve the Swagger API docs / comment.
                //var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                //var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                //... and tell Swagger to use those XML comments.
                //c.IncludeXmlComments(xmlPath);
            });
#endif
        }


        /// <summary>
        /// ConfigureServices.
        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        /// </summary>
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILoggerFactory loggerFactory)
        {
            ////////////////////////////////////////
            /// Logs - initialization.
            ////////////////////////////////////////
            var logger = loggerFactory.CreateLogger(nameof(Startup));
            loggerFactory.AddFile("logs/{Date}.log");


            ////////////////////////////////////////
            // If mode is in dev, we show exception.
            ////////////////////////////////////////
            if (env.IsDevelopment())
            {
                logger.LogInformation(string.Format(Resources.Resource.startup_development_environment, GetType().Assembly.GetName().Version));
                app.UseDeveloperExceptionPage();
            }
            else
            {
                logger.LogInformation(string.Format(Resources.Resource.startup_production_environment, GetType().Assembly.GetName().Version));

                // Security Headers, see https://securityheaders.com/
                /* Disabled because it's an API, only HSTS is important.
                app.Use(async (context, next) =>
                {
                    context.Response.Headers.Add("X-XSS-Protection", "1; mode=block");
                    context.Response.Headers.Add("X-Frame-Options", "SAMEORIGIN");
                    context.Response.Headers.Add("Referrer-Policy", "strict-origin-when-cross-origin");
                    context.Response.Headers.Add("X-Content-Type-Options", "nosniff");
                    await next();
                });
                */

                // Force to use HTTPS.
                if (AppSettings.ForceHTTPS)
                {
                    app.UseHttpsRedirection()   // Redirect HTTP to HTTPS.
                        .UseHsts();             // Enable HSTS - Strict-Transport-Security header.
                }
            }


            ////////////////////////////////////////
            /// Use - initialization.
            ////////////////////////////////////////
            app.UseRequestLocalization()   // Use language.
                .UseMvc();                  // Use MVC.


            ////////////////////////////////////////
            /// Use Swagger. (API docs generator)
            /// To test Swagger API go to - http://localhost:56352/swagger/
            ////////////////////////////////////////
#if DEBUG
            app.UseSwagger();
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint($"/swagger/v1.0/swagger.json", "Core API");
            });
#endif
        }
    }
}